@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using Components
@using System.Text.Json
@using Pages
@inject IJSRuntime JS

<main class="@(!DarkMode ? "dark" : "")">

    <div class="bg-white dark:bg-black min-h-[100vh] wrapper w-full max-w-[500px] mx-auto text-black dark:text-white">

        <div class="bg-white dark:bg-black z-[500] fixed top-0 w-full max-w-[500px]">
            <div id="navbar" class="navbar gsap-animate-transition relative z-[510] flex items-center p-3">
                <div class="inline-block"><div class="ani-box gsap-animate-transition"><img src="media/logo_js.svg" @onclick="@(() => NavigateToPage("/"))" class="invert dark:filter-none h-5"/></div></div>
                <span class="grow"></span>
                @*<div @onclick="@(()=> DarkMode = !DarkMode)" class="@(ShowMenu ? "" : "hidden") mr-3 text-xl rounded-full text-black dark:text-white grid cursor-pointer"><span class="block place-self-center @(DarkMode ? "iconoir-sun-light" : "iconoir-half-moon")"</span></div>*@
                <div class="z-[511] inline-block"><span @onclick="@(() => NavigateToPage(ContactUri))" class="ani-box gsap-animate-transition justify-end flex flex-row cursor-pointer text-lg tracking-[-0.035em] leading-none pl-6 py-1"><span>@(ContactUri == "/contact" ? "Contact" : "Close")</span></span></div>
            </div>
            @*<div id="progress-container" class="@(!ShowMenu && NavigationManager.Uri.Contains("blog/post") ? "flex" : "hidden") bg-stone-100 dark:bg-black relative pt-0 p-2 w-full gap-x-1"></div>*@
        </div>

        <div class="content gsap-animate-transition">
            @Body
            @*<DynamicComponent Type="CurrentPage"/>*@
        </div>

    </div>
</main>


@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
    private int PostCount { get; set; } = 0;
    private bool DarkMode { get; set; } = true;
private string ContactUri
{
    get
    {
        // Check if the current URI ends with "/contact" (case-insensitive)
        return NavigationManager.Uri.TrimEnd('/').EndsWith("/contact", StringComparison.OrdinalIgnoreCase) 
            ? "/" 
            : "/contact";
    }
}

    private ValueTask PreventScrolling(bool val) {
        return JS.InvokeVoidAsync("preventScrolling", val);
    }

    private async Task OpenMenuAnimate() {
        await JS.InvokeVoidAsync("openMenu");
    }

    private async Task CloseMenuAnimate() {
        await JS.InvokeVoidAsync("closeMenu");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // Prevent showing page before fading in
            await JS.InvokeVoidAsync("pageLoaded");
            await JS.InvokeVoidAsync("animateNavbar");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void NavigateToPage(string page) {
        var uri = Path.Combine(NavigationManager.BaseUri, page);

        if (!(uri == NavigationManager.Uri)) {
            await JS.InvokeAsync<object>("pageFadeOut");
            await JS.InvokeVoidAsync("pageLoaded");
            NavigationManager.NavigateTo(uri);
        }
    }

   protected override async Task OnInitializedAsync()
   {
        var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
        var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
        if (posts != null)
                PostCount = posts.Count;
   }
}