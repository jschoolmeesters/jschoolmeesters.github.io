@page "/blog"
@using System.Text.Json
@using BlazorPortfolio.Models;
@using System.Globalization
@inject NavigationManager NavigationManager
<PageTitle>Jordy Schoolmeesters â€” Blog</PageTitle>

<div class="page w-full p-4 select-none">
   <h2 class="text-sm p-0 m-0 mt-12 mb-2 first-child:">Latest posts</h2>
   @*<div class="mt-3" />
   <label class="my-3 bg-transparent input border-black dark:border-white input-search flex items-center gap-2 pl-[1.125rem] pr-3">
      <input type="text" class="grow" placeholder="Search..." @oninput="@HandleInputChange" @bind-value="@SearchValue"/>
      <i class="text-2xl p-1.5 rounded-lg iconoir-@(string.IsNullOrEmpty(SearchValue) ? "search" : "xmark hover:bg-[#00000010] hover:cursor-pointer")" @onclick="@(() => SearchValue = string.Empty)"></i>
   </label>*@
   
      @foreach (var item in FilteredPosts) {
         var post = item.post;
         var index = item.i;

         <div class="cursor-pointer border-t border-b py-3 border-black dark:border-white flex flex-row" @onclick="@(() => NavigateToPost(post))">
            <div class="pr-3">
               <span class="leading-none">@(index < 10 ? "0" + (index + 1) : (index + 1))</span>
            </div>
            <div class="grow flex flex-col">
               <h2 class="text-2xl tracking-[-0.035em] leading-none">@post.Title</h2>
               <div class="mt-1.5">
                  @foreach (string tag in post.TagsAsList) {
                     <div class="badge align-middle text-xs bg-transparent rounded-full text-black dark:text-white border border-black dark:border-white mr-2 uppercase">@tag</div>
                  }
               </div>
               <div class="flex flex-row mt-3">
                  <div class="basis-1/2"><span>@post.DateAsUriString</span></div>
                  <div class="basis-1/2 text-end"><span class="">5 min read <span class="iconoir-arrow-right align-middle"></span></span></div>
               </div>
            </div>
         </div>

      }
</div>

@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
   private List<Models.Post> Posts { get; set; } = new List<Models.Post>();
   private string SearchValue { get; set; } = String.Empty;
   private List<(Models.Post post, int i)> FilteredPosts
   {
      get
      {
         return Posts.Where(p => string.IsNullOrEmpty(SearchValue) ? true : p.Title.ToLower().Contains(SearchValue.ToLower()))
                                 .OrderByDescending(p => p.DateAsDateTime)
                                 .Take(3)
                                 .Select((post, i) => ( post, i ))
                                 .ToList();
      }
   }
   protected override async Task OnInitializedAsync()
   {
      var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
      var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
      if (posts != null)
         Posts = posts;
   }


   private void NavigateToPost(Models.Post post)
   {
      var baseUri = NavigationManager.BaseUri;
      NavigationManager.NavigateTo(Path.Combine(baseUri, "blog", "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1)));
   }

   private void HandleInputChange(ChangeEventArgs e)
   {
      SearchValue = e.Value.ToString();
   }
}