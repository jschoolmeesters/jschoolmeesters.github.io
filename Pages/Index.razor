@page "/"
@using System.Text.Json
@using BlazorPortfolio.Models;
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
<PageTitle>Jordy Schoolmeesters — Computing Science</PageTitle>

<div class="index gsap-animate-transition w-full relative">

   <div class="p-3 pt-[4rem] pb-9 relative"> 

      <div class="about gsap-animate-transition">

         <div class="flex flex-col w-full">

            <div class="border-bottom gsap-animate-transition h-[1px] w-full bg-black dark:bg-white"></div>

            <div class="py-3">

               <h1 class="about-first gsap-lines gsap-animate-transition text-3xl tracking-[-0.035em] leading-none">
                  <div class="gsap-line">
                     <div class="gsap-line-inner">
                        Dutch creative specialized
                     </div>
                  </div>
                  <div class="gsap-line">
                     <div class="gsap-line-inner">
                        in webdesign and audio.
                     </div>
                  </div>
               </h1>
            </div>
            <div class="border-bottom gsap-animate-transition h-[1px] w-full bg-black dark:bg-white"></div>

         </div>

         <div class="posts-header gsap-animate-transition">
            <div class="gsap-line">
                  <h2 class="gsap-line-inner text-sm p-0 m-0 mt-3 mb-5 text-[rgb(145,145,145)]">Categories</h2>
            </div>
            <div class="posts-filter gap-x-1 flex flex-wrap">
               @code{
                  string[] tags = new string[] { "All", "Project Updates", "Audio", "Studio Insights" };
               }
               @foreach (int i in Enumerable.Range(0, tags.Length)) {
                  <span class="whitespace-nowrap @(i > 0 ? "text-[rgb(145,145,145)]" : "")"><span class="text-2xl @(i == 0 ? "underline decoration-2" : "") cursor-pointer">@tags[i]</span><span class="text-sm align-top">(@FilteredPosts.Count)</span></span>
               }
            </div>
         </div>

         <div class="post-border gsap-animate-transition w-full"></div>
         @foreach (var item in FilteredPosts) {
            var post = item.post;
            var index = item.i;

            <div class="post gsap-animate-transition cursor-pointer py-3 flex flex-row" @onclick="@((e) => NavigateToPost(e, post))">
               <div class="pr-3">
                  <span class="leading-none">@(index < 10 ? "0" + (index + 1) : (index + 1))</span>
               </div>
               <div class="grow flex flex-col">
                  <div class="h-[40vh]"><img class="mb-3 object-cover" src="@("posts/media/" + post.Img)"/></div>
                  <h2 class="text-lg tracking-[-0.035em] leading-tighter">@post.Title</h2>
                  <div class="flex flex-wrap">
                     @foreach (int i in Enumerable.Range(0, post.TagsAsList.Count)) {
                        <div class="text-lg whitespace-nowrap">@post.TagsAsList[i]@(i < post.TagsAsList.Count - 1 ? "/" : "")</div>
                     }
                  </div>
               </div>
            </div>
            <div class="post-border gsap-animate-transition w-full border-t border-black dark:border-white"></div>
         }

         <footer class="py-6 flex flex-col">

            <div class="links gsap-animate-transition relative overflow-hidden">
               <BlazorPortfolio.Components.Links />
            </div>

            <div class="gap-y-0 footer-text gsap-animate-transition mt-6 text-lg tracking-[-0.035em] leading-none items-stretch grid grid-cols-2">
               <div class="text-lg tracking-[-0.035em] leading-none self-end"><span>Shift + G</span><br><span>Back to top ↑</span></div>
               <img class="w-full" src="media/logo_js.svg"/>
            </div>
         </footer>
      </div>
   </div>
</div>

@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
   private List<Models.Post> Posts { get; set; } = new List<Models.Post>();
   private string SearchValue { get; set; } = String.Empty;
   private List<(Models.Post post, int i)> FilteredPosts
   {
      get
      {
         return Posts.Where(p => string.IsNullOrEmpty(SearchValue) ? true : p.Title.ToLower().Contains(SearchValue.ToLower()))
                                 .OrderByDescending(p => p.DateAsDateTime)
                                 .Take(3)
                                 .Select((post, i) => ( post, i ))
                                 .ToList();
      }
   }

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      await base.OnAfterRenderAsync(firstRender);

      if (firstRender) {
         await JS.InvokeVoidAsync("homeLoaded");
        
         while (FilteredPosts.Count == 0)
            await Task.Delay(100);
         bool result = await JS.InvokeAsync<bool>("waitForPosts", FilteredPosts.Count);

         if (result) {
            await JS.InvokeVoidAsync("animatePosts");
         }
      }
   }

   public async Task PostsLoaded() {
      await JS.InvokeVoidAsync("postsLoaded");
   }

   protected override async Task OnInitializedAsync()
   {
      var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
      var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
      if (posts != null)
         Posts = posts;
   }

   private async Task NavigateToPost(MouseEventArgs e, Models.Post post)
   {
      await JS.InvokeVoidAsync("beginTransitionBox", e.ClientX, e.ClientY);
      var baseUri = NavigationManager.BaseUri;
      NavigationManager.NavigateTo(Path.Combine(baseUri, "blog", "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1)));
   }

   private void HandleInputChange(ChangeEventArgs e)
   {
      SearchValue = e.Value.ToString();
   }
}