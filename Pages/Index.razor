@page "/"
@using System.Text.Json
@using BlazorPortfolio.Models;
@using BlazorPortfolio.Components;
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
<PageTitle>Jordy Schoolmeesters — Computing Science</PageTitle>

<div class="w-full relative">

   <div class="px-0 pt-[4rem] relative"> 

      <div class="">

         <div class="flex flex-col w-full">

            <div class="p-3 pb-6 bg-gradient-to-t from-[#feedee] to-white">
               <div class="h-[14rem] relative mb-3">
                  <div class="tip1 absolute bottom-24 right-[20%] margin-right-[-30px] left-auto top-auto">
                     <span class="bg-[#e6ff9a] px-1 py-0.5">Bold & Innovative</span>
                  </div>

                  <div class="tip1 absolute bottom-16 left-0 margin-left-[-30px] right-auto top-auto">
                     <span class="bg-[#ffd867] px-1 py-0.5">Roermond, NL</span>
                  </div>

                  <div class="tip1 absolute bottom-8 right-[10%] margin-right-[-30px] left-auto top-auto">
                     <span class="bg-[#eca2f4] px-1 py-0.5">Brand Identity</span>
                  </div>

                  <div class="tip1 absolute bottom-0 right-0 margin-right-[-30px] left-auto top-auto">
                     <span class="bg-[#bdef74] px-1 py-0.5">Creative Webdesign Agency</span>
                  </div>
               </div>


               <h1 class="about-first text-[#232323] gsap-lines gsap-animate-transition text-[2.9rem] tracking-[-0.07em] leading-[0.75]">
                  <div class="gsap-line">
                     <div class="gsap-line-inner inferi-normal">
                        Unlock Your <span class="inferi-normal-italic">Digital Potential</span>
                     </div>
                  </div>
               </h1>
            </div>

            
            @*<div class="border-bottom gsap-animate-transition h-[1px] w-full bg-black dark:bg-white"></div>*@

         </div>

         @* Highlighted projects section *@

         <div class="pb-3 space-y-6">
            <div class="">
               <img src="media/services2.jpg" class="w-full"/>
               <p class="leading-tight mt-3"><span class="font-bold">Wander</span> — Combining nature with a direct user experience.</p>
            </div>

            <div class="">
               <img src="media/services1.jpg" class="w-full"/>
               <p class="leading-tight mt-3"><span class="font-bold">Evermore</span> — Lorem ipsum dolor Studio amet.</p>
            </div>

         </div>

         @* About section *@
         <div class="pt-24 space-y-6">
            <h3 class="text-4xl leading-none inferi-normal tracking-[-0.015em]">
               Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
            </h3>
            <p>
               Lorem ipsum odor amet, consectetuer adipiscing elit. Pretium per augue vulputate nec porta sagittis. Taciti finibus curae vehicula platea interdum. Maecenas malesuada ullamcorper malesuada libero ullamcorper ex ultricies sem. Ligula justo taciti facilisi, consectetur class lacus eleifend.
            </p>
            <p>
               Lorem ipsum odor amet, consectetuer adipiscing elit. Est duis at venenatis etiam urna potenti consectetur ac. Nibh elit ridiculus etiam consectetur viverra. Taciti sem natoque tristique tempus lectus sociosqu morbi porttitor.
            </p>
         </div>


         @* Services section *@
         <div class="flex flex-col w-full mt-24">

            <h1 class="mb-3 about-first gsap-lines gsap-animate-transition text-4xl tracking-[-0.035em] leading-none">
               <div class="gsap-line">
                  <div class="gsap-line-inner">
                     Services
                  </div>
               </div>
            </h1>

            @*<div class="border-bottom h-[1px] w-full bg-black dark:bg-white"></div>*@

            @*
            <div class="gsap-line">
                  <h2 class="gsap-line-inner text-sm p-0 m-0 mb-3 text-[rgb(145,145,145)]">Webdesign</h2>
            </div>
            *@

            <Accordion Title="Websites" StartExpanded="true">
               <img src="media/services2.jpg" class="w-full"/>
               <p>A modern website using the world's #1 system for managing your content.</p>
               <ul class="pl-5">
                  <li class="relative before:content-['—'] before:absolute before:-left-5 before:text-black before:dark:text-white">Fastest delivery time</li>
                  <li class="relative before:content-['—'] before:absolute before:-left-5 before:text-black before:dark:text-white">Easy content management</li>
                  <li class="relative before:content-['—'] before:absolute before:-left-5 before:text-black before:dark:text-white">Long term stable</li>
               </ul>
            </Accordion>

            <Accordion Title="Identity Design" StartExpanded="true">
               <img src="media/services1.jpg" class="w-full"/>
               <p>A handcrafted website using only the latest technologies to create an ultra fast and responsive and new home your brand without any compromises.</p>
               <ul class="pl-5">
                  <li class="relative before:content-['—'] before:absolute before:-left-5 before:text-black before:dark:text-white">Highly personalized and detailed design</li>
                  <li class="relative before:content-['—'] before:absolute before:-left-5 before:text-black before:dark:text-white">Easy content management</li>
               </ul>
            </Accordion>

            <Accordion Title="Technical support">
               <p>Got technical issues with your current website?</p>
               <p>We've got you covered, with years of experience working with many different technologies there's no problem we can't fix.</p>
            </Accordion>

            <div class="gsap-line">
                  <h2 class="gsap-line-inner text-sm p-0 m-0 mt-6 mb-3 text-[rgb(145,145,145)]">Audio</h2>
            </div>

            <Accordion Title="Podcast editing">
               <p>Custom copyright-free electronic music for any project or vibe.</p>
            </Accordion>

            <Accordion Title="Sync music">
               <p>Custom copyright-free electronic music for any project or vibe.</p>
            </Accordion>
         </div>

         

         <div class="pb-3 pt-24">

            <h1 class="about-first gsap-lines gsap-animate-transition text-4xl tracking-[-0.035em] leading-none">
               <div class="gsap-line">
                  <div class="gsap-line-inner">
                     Studio Insights
                  </div>
               </div>
            </h1>
         </div>

         <div class="border-bottom h-[1px] w-full bg-black dark:bg-white"></div>

         <div class="posts-header gsap-animate-transition">
            <div class="gsap-line">
                  <h2 class="gsap-line-inner text-sm p-0 m-0 mt-6 mb-3 text-[rgb(145,145,145)]">Categories</h2>
            </div>
            <div class="posts-filter gap-x-1 flex flex-wrap">
               @foreach (int i in Enumerable.Range(0, tags.Length)) {
                  var tag = tags[i];
                  <span @onclick="@(() => ChangeFilterTag(tag.Item1))" class="whitespace-nowrap @(filterTag != tag.Item1 ? "text-black dark:text-[rgb(145,145,145)]" : "")"><span class="text-2xl @(filterTag == tag.Item1 ? "underline decoration-2" : "") cursor-pointer">@tag.Item1</span><span class="text-sm align-top">(@tag.Item2)</span></span>
               }
            </div>
         </div>

         <div class="posts gsap-animate-transition">
            @foreach (var item in FilteredPosts.Where(p => filterTag == "All" ? true : p.post.TagsAsList.Contains(filterTag))) {
               var post = item.post;
               var index = item.i;

               <div class="post gsap-animate-transition cursor-pointer pt-3 flex flex-row" @onclick="@((e) => NavigateToPost(e, post))">
                  @*
                  <div class="pr-3">
                     <span class="leading-none">@(index < 10 ? "0" + (index + 1) : (index + 1))</span>
                  </div>
                  *@
                  <div class="grow flex flex-col">
                     <div class="h-[30vh] w-full mb-3"><img class="object-cover object-center w-full h-full" src="@("posts/media/" + post.Img)"/></div>
                     <h2 class="tracking-[-0.035em] leading-tighter">@post.Title</h2>
                     <div class="flex flex-wrap">
                        @foreach (int i in Enumerable.Range(0, post.TagsAsList.Count)) {
                           <div class="whitespace-nowrap">@post.TagsAsList[i]@(i < post.TagsAsList.Count - 1 ? "/" : "")</div>
                        }
                        <div class="whitespace-nowrap text-[rgb(145,145,145)]">&nbsp;(Case study)</div>
                     </div>
                  </div>
               </div>
               @*<div class="post-border gsap-animate-transition w-full border-t border-black dark:border-white"></div>*@
            }
         </div>

         <footer class="pb-6 mt-24 flex flex-col">

            <div class="links gsap-animate-transition relative overflow-hidden">
               <BlazorPortfolio.Components.Links />
            </div>

            <div class="gap-y-0 footer-text gsap-animate-transition mt-6 text-lg tracking-[-0.035em] leading-none items-stretch grid grid-cols-2">
               <div class="text-lg tracking-[-0.035em] leading-none self-end"><span>Shift + G</span><br><span>Back to top ↑</span></div>
               <img class="w-full invert dark:filter-none" src="media/logo_js.svg"/>
            </div>
         </footer>
      </div>
   </div>
</div>

@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
   private List<Models.Post> Posts { get; set; } = new List<Models.Post>();
   private string SearchValue { get; set; } = String.Empty;
   private List<(Models.Post post, int i)> FilteredPosts
   {
      get
      {
         return Posts.Where(p => string.IsNullOrEmpty(SearchValue) ? true : p.Title.ToLower().Contains(SearchValue.ToLower()))
                                 .OrderByDescending(p => p.DateAsDateTime)
                                 .Take(3)
                                 .Select((post, i) => ( post, i ))
                                 .ToList();
      }
   }

   private (string, int)[] tags = (new string[] { "All", "Project Updates", "Audio", "Webdesign", "Insights" }).Select((tag) => (tag, 0)).ToArray();
   private string filterTag = "All";
   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender) {
         //await JS.InvokeVoidAsync("pageLoaded");
        
         while (FilteredPosts.Count == 0)
            await Task.Delay(100);
         bool result = await JS.InvokeAsync<bool>("waitForPosts", FilteredPosts.Count);

         if (result) {
            await JS.InvokeVoidAsync("pageFadeIn");
         }
      }

      await base.OnAfterRenderAsync(firstRender);
   }

   public async Task PostsLoaded() {
      await JS.InvokeVoidAsync("postsLoaded");
   }

   protected override async Task OnInitializedAsync()
   {
      var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
      var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
      if (posts != null) {
         Posts = posts;

         foreach (var post in Posts)
            tags.Where(t => post.TagsAsList.Contains(t.Item1)).ToList()
                .ForEach(tag => { tags[Array.IndexOf(tags, tag)] = (tag.Item1, tag.Item2 + 1); tags[0] = (tags[0].Item1, tags[0].Item2 + 1); });
      }
   }

   private async Task NavigateToPost(MouseEventArgs e, Models.Post post)
   {
      //await JS.InvokeVoidAsync("beginTransitionBox", e.ClientX, e.ClientY);
      var baseUri = NavigationManager.BaseUri;
      var uri = Path.Combine(baseUri, "blog", "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1));
      
      if (!(uri == NavigationManager.Uri)) {
         await JS.InvokeAsync<object>("pageFadeOut");
         await JS.InvokeVoidAsync("pageLoaded");
         NavigationManager.NavigateTo(uri);
      }
   }

   private void ChangeFilterTag(string tag)
   {
      var result = JS.InvokeAsync<object>("fadeOutPosts");
      filterTag = tag;
      JS.InvokeVoidAsync("fadeInPosts");
   }

   private void HandleInputChange(ChangeEventArgs e)
   {
      SearchValue = e.Value.ToString();
   }
}